#!groovy
def RELEASE_VERSION
pipeline{
	agent any
	parameters {
		string(defaultValue: 'https://ta_ukit_stash@git.bingo.ptec/scm/feb/back-office-system.git', description: 'GIT Project Repo', name: 'GIT_REPO')
	}
	stages{
		stage ('Preparation') {
			steps {
				script {
					/** Workaround for first build where params are null **/
					params.each { k, v -> env[k] = v }
					sh '/usr/local/git/libexec/git-core/git config --global credential.helper cache'
					sh '/usr/local/git/libexec/git-core/git config --global push.default simple'
				}

				checkout([$class: 'GitSCM',
						  branches: [[name: "*/${BRANCH_NAME}"]],
						  extensions: [[$class: 'CleanCheckout'],[$class: 'CloneOption', timeout: 20]],
						  userRemoteConfigs: [[credentialsId: 'SVCBitbucketService',url: "${GIT_REPO}"]]
				])

				script {
					/** Detect release version **/
					RELEASE_VERSION = ("${BRANCH_NAME}" =~ /(.*)\/(.*)/)[0].getAt(2)
				}

				print "Branch Name: ${BRANCH_NAME} with release version ${RELEASE_VERSION}"

				/** Tag Git at start of build **/
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SVCBitbucketService', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
					sh 'echo ${GIT_USERNAME} pushing '
					sh '/usr/local/git/libexec/git-core/git config --global user.email "${GIT_USERNAME}"'
					sh '/usr/local/git/libexec/git-core/git config --global user.name "Jenkins"'
					sh '/usr/local/git/libexec/git-core/git tag -a bos-v' + RELEASE_VERSION +'-'+ getProperty('BUILD_NUMBER') + ' -m "#0 Build ' + RELEASE_VERSION +'-'+ getProperty('BUILD_NUMBER') + '"'
					sh '/usr/local/git/libexec/git-core/git push origin HEAD:${BRANCH_NAME} --tags'
				}

				/** Create annotated tag in git **/
				nodejs(nodeJSInstallationName: 'v11.10.1') {
					sh 'npm install --prefer-offline --progress false --loglevel warn'
				}
			}
		}
		stage('Build') {
			steps {
				nodejs(nodeJSInstallationName: 'v11.10.1') {
					sh 'npm run build'
				}
			}
		}
		stage('Package') {
			steps {
				nodejs(nodeJSInstallationName: 'v11.10.1') {
					sh 'npm run package -- --releaseversion=' + RELEASE_VERSION + ' --buildversion=' + getProperty('BUILD_NUMBER')
				}
			}

		}
		stage('Deploy') {
			steps {
				rtUpload (
						serverId: "-283547227@1458215185321",
						specPath: 'jenkins/uploadSpec.json'
				)
				rtMavenDeployer (
						id:"back_office_deployer",
						serverId: "-283547227@1458215185321",
						releaseRepo : "internal",
						snapshotRepo : "internal",
						deployArtifacts : false
				)
				script {
					currentBuild.result = 'SUCCESS'
				}
			}
		}
		stage('Update Distrib') {
			steps {
				build job: "BOS_Distrib/" + env.BRANCH_NAME.replaceAll("/", "%2F"), propagate: false
			}
		}
	}
	/*post {
		failure {
			script {
				currentBuild.result = 'FAILURE'
			}
		}
		always {
			step([$class: 'Mailer',
				  notifyEveryUnstableBuild: true,
				  recipients: "bingo.frontenddevelopers@playtech.com",
				  sendToIndividuals: true])
		}
	}*/
}